<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="23.05.0.0">
<procedure name="main">
<interface/>
<body>
<l>for id := 1 to 3 by 1</l>
<l>    read_image (Image, 'D:/desk/相机标定/任务/任务五/图片/'+1+'.png')</l>
<l>    decompose3 (Image, R,G,B)</l>
<l>    trans_from_rgb (R,G,B,H,S,V,'hsv')</l>
<l>    threshold (S,Region,5,255)</l>
<l>    get_image_size (S, Width, Height)</l>
<l>    connection (Region, ConnectedRegion)</l>
<l>    count_obj (ConnectedRegion, Number1)</l>
<l>    emphasize (Image, ImageEmphasize, 3.5, 3.5, 10)</l>
<l>    threshold (V, Regions, 115, 135)</l>
<l>    concat_obj (ConnectedRegion,Regions,ConnectedRegions)</l>
<l>    select_shape (ConnectedRegions, SelectedRegions, 'area', 'and', 1129.63, 13870.4)</l>
<l>    count_obj (SelectedRegions, Number)</l>
<l>    for i := 1 to Number by 1</l>
<l>        select_obj (SelectedRegions, ObjectSelected, i)</l>
<l>        dilation_circle (ObjectSelected, RegionDilation, 2)</l>
<l>        if (i&gt;Number1)</l>
<l>            reduce_domain (V, RegionDilation, ImageReduced)</l>
<l>        else</l>
<l>            reduce_domain (S, RegionDilation, ImageReduced)</l>
<l>        endif</l>
<l>        *points_harris (ImageReduced,0.7, 2, 0.08, 1000, Row, Column)</l>
<c>        </c>
<l>        points_harris (ImageReduced,0.7, 2, 0.08, 0, Row, Column)</l>
<l>        *points_harris_binomial (ImageReduced, 60, 5000, 0.08, 0, 'on', Row, Column)</l>
<l>        *points_sojka (ImageReduced, 9, 2.5, 0.6, 30, 90, 0.5, 'true', Row, Column)</l>
<l>        *points_lepetit (ImageReduced, 3, 1, 20, 35, 'interpolation', Row, Column)</l>
<l>        *points_foerstner (ImageReduced, 1, 2, 3, 200, 0.3, 'gauss', 'false', \
    Row, Column, CoRRJunctions, CoRCJunctions,\
    CoCCJunctions, RowArea, ColumnArea, CoRRArea, CoRCArea, CoCCArea)</l>
<l>        gen_cross_contour_xld (Cross2,Row, Column, 6, 0.785398)</l>
<l>        shape_trans (ObjectSelected,RegionTrans,'outer_circle')</l>
<l>        area_center (RegionTrans,Area,C_Row,C_Column)</l>
<l>        if (|Row|=0)</l>
<l>            create_metrology_model (MetrologyHandle)</l>
<l>            set_metrology_model_image_size (MetrologyHandle, Width, Height)</l>
<l>            add_metrology_object_circle_measure (MetrologyHandle, C_Row, C_Column, sqrt(Area/3.1415), 20, 5, 1, 30, [], [], Index)</l>
<l>            Radius:=sqrt(Area/3.1415)</l>
<l>            if (i&gt;Number1)</l>
<l>             apply_metrology_model (V, MetrologyHandle)</l>
<l>        else</l>
<l>            apply_metrology_model (S, MetrologyHandle)</l>
<l>        endif</l>
<c>            </c>
<c>            </c>
<l>            get_metrology_object_result (MetrologyHandle, 'all', 'all', 'result_type', 'all_param', LineParameter)</l>
<l>            dev_clear_window ()</l>
<l>            dev_display (S)</l>
<l>            get_metrology_object_measures (Contour, MetrologyHandle, 'all', 'all', Null, Null)</l>
<l>            dev_close_window ()</l>
<l>            dev_display (Image)</l>
<l>            dev_get_window (WindowHandle)</l>
<l>            disp_message (WindowHandle, LineParameter[2], 'image', LineParameter[0], LineParameter[1], 'black', 'true')</l>
<l>            clear_metrology_model (MetrologyHandle)</l>
<l>        else</l>
<l>            tuple_atan2 ((Row-C_Row),(Column-C_Column),RadAtan)</l>
<l>            angle:=deg(RadAtan)</l>
<l>            tuple_sort_index (RadAtan,Indices)</l>
<l>            Row:=Row[Indices]</l>
<l>            Column:=Column[Indices]</l>
<c>            </c>
<l>            create_metrology_model (MetrologyHandle)</l>
<l>            set_metrology_model_image_size (MetrologyHandle, Width, Height)</l>
<l>            Row:=[Row,Row[0]]</l>
<l>            Column:=[Column,Column[0]]</l>
<l>            for j := 0 to |Row|-2 by 1</l>
<l>                add_metrology_object_line_measure (MetrologyHandle,Row[j], Column[j],Row[j+1], Column[j+1],  20, 5, 1, 20, [], [], Index)</l>
<l>                gen_region_line (RegionLines, Row[j], Column[j], Row[j+1], Column[j+1])</l>
<l>            endfor</l>
<l>              if (i&gt;Number1)</l>
<l>             apply_metrology_model (V, MetrologyHandle)</l>
<l>        else</l>
<l>            apply_metrology_model (S, MetrologyHandle)</l>
<l>        endif</l>
<l>            get_metrology_object_result (MetrologyHandle, 'all', 'all', 'result_type', 'all_param', LineParameter)</l>
<l>            sequence:=[0:4:|LineParameter|-1]</l>
<l>            sequence:=[sequence,0]</l>
<c>            </c>
<l>            inter_rows:=[]</l>
<l>            inter_cols:=[]</l>
<l>            for k := 0 to |sequence|-2 by 1</l>
<l>                l1Row1:=LineParameter[sequence[k]]</l>
<l>                l1Col1:=LineParameter[sequence[k]+1]</l>
<l>                l1Row2:=LineParameter[sequence[k]+2]</l>
<l>                l1Col2:=LineParameter[sequence[k]+3]</l>
<l>                l2Row1:=LineParameter[sequence[k+1]]</l>
<l>                l2Col1:=LineParameter[sequence[k+1]+1]</l>
<l>                l2Row2:=LineParameter[sequence[k+1]+2]</l>
<l>                l2Col2:=LineParameter[sequence[k+1]+3]</l>
<l>                intersection_lines (l1Row1, l1Col1, l1Row2, l1Col2, l2Row1, l2Col1, l2Row2, l2Col2, inter_row, inter_col, IsOverlapping)</l>
<l>                inter_rows:=[inter_rows,inter_row]</l>
<l>                inter_cols:=[inter_cols,inter_col]</l>
<c>                </c>
<l>            endfor</l>
<c>            </c>
<l>            gen_cross_contour_xld (Cross1,inter_rows, inter_cols, 6, rad(0))</l>
<l>            inter_rows:=[inter_rows,inter_rows[0]]</l>
<l>            inter_cols:=[inter_cols,inter_cols[0]]</l>
<l>            edge_c_rows:=0.5*(inter_rows[0:|inter_rows|-2]+inter_rows[1:|inter_rows|-1])</l>
<l>            edge_c_cols:=0.5*(inter_cols[0:|inter_cols|-2]+inter_cols[1:|inter_cols|-1])</l>
<l>            distance_pp (inter_rows[0:|inter_rows|-2],inter_cols[0:|inter_cols|-2],inter_rows[1:|inter_rows|-1],inter_cols[1:|inter_cols|-1],Distance)</l>
<l>            get_metrology_object_measures (Contour, MetrologyHandle, 'all', 'all', Null, Null)</l>
<l>            dev_close_window ()</l>
<l>            dev_display (Image)</l>
<l>            dev_get_window (WindowHandle)</l>
<l>            disp_message (WindowHandle, Distance, 'image', edge_c_rows, edge_c_cols, 'black', 'true')</l>
<l>            clear_metrology_model (MetrologyHandle)</l>
<l>        endif</l>
<c>        </c>
<l>    endfor</l>
<c></c>
<c></c>
<l>endfor</l>
<c></c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
