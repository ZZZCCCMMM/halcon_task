<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="22.05.0.0">
<procedure name="main">
<interface/>
<body>
<l>for J := 1 to 3 by 1</l>
<c>    * Measure 01: Code generated by Measure 01</c>
<c>    * Measure 01: Prepare measurement</c>
<l>    read_image (Image, 'D:/桌面/任务/任务6基于测量工具的破片检测（上）/测试图'+J+'.png')</l>
<l>    get_image_size (Image, Width, Height)</l>
<l>    AmplitudeThreshold := 82</l>
<l>    RoiWidthLen2 := 15</l>
<l>    set_system ('int_zooming', 'true')</l>
<c>    * Measure 01: Coordinates for line Measure 01 [0]</c>
<l>    LineRowStart_Measure_01_0 := 110</l>
<l>    LineColumnStart_Measure_01_0 := 26.4122</l>
<l>    LineRowEnd_Measure_01_0 := 110</l>
<l>    LineColumnEnd_Measure_01_0 := 1228.4</l>
<c>    </c>
<l>    find_rectangle_width (Image, LineRowStart_Measure_01_0, LineRowEnd_Measure_01_0, LineColumnStart_Measure_01_0, LineColumnEnd_Measure_01_0, RoiWidthLen2, AmplitudeThreshold, right_row, right_column, left_row, left_column, across_column_Mean)</l>
<c>    </c>
<c>    </c>
<c></c>
<c>    * Measure 02: Code generated by Measure 02</c>
<c>    * Measure 02: Prepare measurement</c>
<l>    AmplitudeThreshold := 95</l>
<l>    RoiWidthLen2 := 15</l>
<l>    set_system ('int_zooming', 'false')</l>
<c>    * Measure 02: Coordinates for line Measure 02 [0]</c>
<l>    LineRowStart_Measure_02_0 := 50.4343</l>
<l>    LineColumnStart_Measure_02_0 := 110</l>
<l>    LineRowEnd_Measure_02_0 := 1250.71</l>
<l>    LineColumnEnd_Measure_02_0 := 110</l>
<c>    * Measure 02: Convert coordinates to rectangle2 type</c>
<c>    </c>
<l>    find_rectangle_height (Image, LineRowStart_Measure_02_0, LineRowEnd_Measure_02_0, LineColumnStart_Measure_02_0, LineColumnEnd_Measure_02_0, RoiWidthLen2, AmplitudeThreshold, up_row, up_column, under_row, under_column, erect_center_row_Mean)</l>
<l>    gen_cross_contour_xld (Cross, right_row, right_column, 6, 0.785398)</l>
<l>    gen_cross_contour_xld (Cross1,left_row,left_column, 6, 0.785398)</l>
<l>    gen_cross_contour_xld (Cross2,up_row,up_column, 6, 0.785398)</l>
<l>    gen_cross_contour_xld (Cross3,under_row,under_column, 6, 0.785398)</l>
<c>    </c>
<l>    find_concer (RegionLines1, RegionLines2, RegionLines3, RegionLines4, right_row, right_column, left_row, left_column, up_row, up_column, under_row, under_column, Row, Column)</l>
<l>    line_test (ObjectsConcat6, right_row, left_row, up_row, under_row, right_column, left_column, up_column, under_column, Row, Column)</l>
<c></c>
<l>    *line_test01 (ObjectsConcat6, ObjectsConcat10, up_row, Row, Column, up_column, under_row, under_column)</l>
<l>    union_adjacent_contours_xld (ObjectsConcat6, UnionContours1,20000, 1, 'attr_forget')</l>
<l>    smallest_rectangle2_xld (UnionContours1, Row1, Column1, Phi, Length1, Length2)</l>
<l>    gen_rectangle2_contour_xld (Rectangle, Row1, Column1, Phi, Length1, Length2)</l>
<l>    *fit_rectangle2_contour_xld (ObjectsConcat6, 'tukey', -1, 0, 0, 3, 2, Row2, Column2, Phi2, Length21, Length22, PointOrder2)</l>
<l>    *gen_rectangle2_contour_xld (Rectangle2, Row2, Column2, Phi2, Length21, Length22)</l>
<l>    stop ()</l>
<c as_id="measure1d" as_name="Measure 01" as_grp="[1,1]" as_ord="1">    </c>
<c as_id="measure1d" as_name="Measure 01" as_grp="[2,3]" as_ord="1">    </c>
<c></c>
<l>endfor</l>
<c></c>
<c as_id="measure1d" as_name="Measure 02" as_grp="[1,1]" as_ord="1"></c>
<c as_id="measure1d" as_name="Measure 02" as_grp="[4,6]" as_ord="1"></c>
<c></c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="find_rectangle_width">
<interface>
<io>
<par name="Image" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="LineRowStart_Measure_01_0" base_type="ctrl" dimension="0"/>
<par name="LineRowEnd_Measure_01_0" base_type="ctrl" dimension="0"/>
<par name="LineColumnStart_Measure_01_0" base_type="ctrl" dimension="0"/>
<par name="LineColumnEnd_Measure_01_0" base_type="ctrl" dimension="0"/>
<par name="RoiWidthLen2" base_type="ctrl" dimension="0"/>
<par name="AmplitudeThreshold" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="right_row" base_type="ctrl" dimension="0"/>
<par name="right_column" base_type="ctrl" dimension="0"/>
<par name="left_row" base_type="ctrl" dimension="0"/>
<par name="left_column" base_type="ctrl" dimension="0"/>
<par name="across_center_column_Mean" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>right_row:=[]</l>
<l>right_column:=[]</l>
<l>left_row:=[]</l>
<l>left_column:=[]</l>
<l>across_center_row:=[]</l>
<l>across_column:=[]</l>
<l>i:=0</l>
<c></c>
<l>while (1)</l>
<l>    LineRowStart_Measure_01_0 := 60+i</l>
<l>    LineRowEnd_Measure_01_0 := 60+i</l>
<c>    *公差为1</c>
<c>    * Measure 01: Convert coordinates to rectangle2 type</c>
<l>    TmpCtrl_Row := 0.5*(LineRowStart_Measure_01_0+LineRowEnd_Measure_01_0)</l>
<l>    TmpCtrl_Column := 0.5*(LineColumnStart_Measure_01_0+LineColumnEnd_Measure_01_0)</l>
<l>    TmpCtrl_Dr := LineRowStart_Measure_01_0-LineRowEnd_Measure_01_0</l>
<l>    TmpCtrl_Dc := LineColumnEnd_Measure_01_0-LineColumnStart_Measure_01_0</l>
<l>    TmpCtrl_Phi := atan2(TmpCtrl_Dr, TmpCtrl_Dc)</l>
<l>    TmpCtrl_Len1 := 0.5*sqrt(TmpCtrl_Dr*TmpCtrl_Dr + TmpCtrl_Dc*TmpCtrl_Dc)</l>
<l>    TmpCtrl_Len2 := RoiWidthLen2</l>
<c>    * Measure 01: Create measure for line Measure 01 [0]</c>
<c>    * Measure 01: Attention: This assumes all images have the same size!</c>
<l>    gen_measure_rectangle2 (TmpCtrl_Row, TmpCtrl_Column, TmpCtrl_Phi, TmpCtrl_Len1, TmpCtrl_Len2, 1280, 1280, 'nearest_neighbor', MsrHandle_Measure_01_0)</l>
<c>    * Measure 01: Set fuzzy functions on measure objects</c>
<l>    FuzzyThreshold := 0.6</l>
<l>    ReferenceWidth := 30</l>
<l>    create_funct_1d_pairs ([1126.08,1126.58,1127.58,1128.08], [0,1,1,0], TmpCtrl_FunctionSize)</l>
<l>    set_fuzzy_measure (MsrHandle_Measure_01_0, 'size', TmpCtrl_FunctionSize)</l>
<c>    </c>
<l>    fuzzy_measure_pairs (Image, MsrHandle_Measure_01_0, 1.5, AmplitudeThreshold, 0.6, 'all', Row1_Measure_01_0, Column1_Measure_01_0, Amplitude1_Measure_01_0, Row2_Measure_01_0, Column2_Measure_01_0, Amplitude2_Measure_01_0, TmpCtrl_RowCenter, TmpCtrl_ColumnCenter, Score_Measure_01_0, Width_Measure_01_0, Distance_Measure_01_0)</l>
<c>    * Measure 01: Do something with the results</c>
<c>    </c>
<c>    </c>
<c>    *公差为10</c>
<c>   * Measure 01: Convert coordinates to rectangle2 type</c>
<l>*     TmpCtrl_Row := 0.5*(LineRowStart_Measure_01_0+LineRowEnd_Measure_01_0)</l>
<l>*     TmpCtrl_Column := 0.5*(LineColumnStart_Measure_01_0+LineColumnEnd_Measure_01_0)</l>
<l>*     TmpCtrl_Dr := LineRowStart_Measure_01_0-LineRowEnd_Measure_01_0</l>
<l>*     TmpCtrl_Dc := LineColumnEnd_Measure_01_0-LineColumnStart_Measure_01_0</l>
<l>*     TmpCtrl_Phi := atan2(TmpCtrl_Dr, TmpCtrl_Dc)</l>
<l>*     TmpCtrl_Len1 := 0.5*sqrt(TmpCtrl_Dr*TmpCtrl_Dr + TmpCtrl_Dc*TmpCtrl_Dc)</l>
<l>*     TmpCtrl_Len2 := RoiWidthLen2</l>
<c>    * Measure 01: Create measure for line Measure 01 [0]</c>
<c>    * Measure 01: Attention: This assumes all images have the same size!</c>
<l>*     gen_measure_rectangle2 (TmpCtrl_Row, TmpCtrl_Column, TmpCtrl_Phi, TmpCtrl_Len1, TmpCtrl_Len2, 1280, 1280, 'nearest_neighbor', MsrHandle_Measure_01_0)</l>
<c>    * Measure 01: Set fuzzy functions on measure objects</c>
<l>*     FuzzyThreshold := 0.6</l>
<l>*     create_funct_1d_pairs ([1115.63,1118.88,1130.34,1133.59], [0,1,1,0], TmpCtrl_FunctionSize)</l>
<l>*     set_fuzzy_measure (MsrHandle_Measure_01_0, 'size', TmpCtrl_FunctionSize)</l>
<c>    </c>
<c>    * Measure 01: Execute measurements</c>
<l>*     fuzzy_measure_pairs (Image, MsrHandle_Measure_01_0, 1.7, AmplitudeThreshold, 0.6, 'all', Row1_Measure_01_0, Column1_Measure_01_0, Amplitude1_Measure_01_0, Row2_Measure_01_0, Column2_Measure_01_0, Amplitude2_Measure_01_0, TmpCtrl_RowCenter, TmpCtrl_ColumnCenter, Score_Measure_01_0, Width_Measure_01_0, Distance_Measure_01_0)</l>
<c>    * Measure 01: Do something with the results</c>
<c>    </c>
<c>    </c>
<c>    </c>
<l>    right_row:=[right_row,Row1_Measure_01_0]</l>
<l>    right_column:=[right_column,Column1_Measure_01_0]</l>
<l>    left_row:=[left_row,Row2_Measure_01_0]</l>
<l>    left_column:=[left_column,Column2_Measure_01_0]</l>
<l>    across_column:=[across_column,TmpCtrl_ColumnCenter]</l>
<c>    </c>
<l>    tuple_is_number (right_row, IsNumber)</l>
<l>    if (i==1200)</l>
<l>        break</l>
<l>    endif</l>
<l>   i:=i+5</l>
<l>endwhile</l>
<c></c>
<c>   </c>
<l>tuple_mean (across_column,across_center_column_Mean)</l>
<c></c>
<l>return ()</l>
</body>
<docu id="find_rectangle_width">
<parameters>
<parameter id="AmplitudeThreshold"/>
<parameter id="Image"/>
<parameter id="LineColumnEnd_Measure_01_0"/>
<parameter id="LineColumnStart_Measure_01_0"/>
<parameter id="LineRowEnd_Measure_01_0"/>
<parameter id="LineRowStart_Measure_01_0"/>
<parameter id="RoiWidthLen2"/>
<parameter id="across_center_column_Mean"/>
<parameter id="left_column"/>
<parameter id="left_row"/>
<parameter id="right_column"/>
<parameter id="right_row"/>
</parameters>
</docu>
</procedure>
<procedure name="find_rectangle_height">
<interface>
<io>
<par name="Image" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="LineRowStart_Measure_02_0" base_type="ctrl" dimension="0"/>
<par name="LineRowEnd_Measure_02_0" base_type="ctrl" dimension="0"/>
<par name="LineColumnStart_Measure_02_0" base_type="ctrl" dimension="0"/>
<par name="LineColumnEnd_Measure_02_0" base_type="ctrl" dimension="0"/>
<par name="RoiWidthLen2" base_type="ctrl" dimension="0"/>
<par name="AmplitudeThreshold" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="up_row" base_type="ctrl" dimension="0"/>
<par name="up_column" base_type="ctrl" dimension="0"/>
<par name="under_row" base_type="ctrl" dimension="0"/>
<par name="under_column" base_type="ctrl" dimension="0"/>
<par name="erect_center_row_Mean" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>up_row:=[]</l>
<l>up_column:=[]</l>
<l>under_row:=[]</l>
<l>under_column:=[]</l>
<l>erect_center_row:=[]</l>
<l>erect_column:=[]</l>
<l>I:=0</l>
<l>while (1)</l>
<l>    LineColumnStart_Measure_02_0 := 60+I</l>
<l>    LineColumnEnd_Measure_02_0 := 60+I</l>
<c>    </c>
<c>    *公差为10</c>
<c>    * Measure 01: Convert coordinates to rectangle2 type</c>
<l>*     TmpCtrl_Row := 0.5*(LineRowStart_Measure_02_0+LineRowEnd_Measure_02_0)</l>
<l>*     TmpCtrl_Column := 0.5*(LineColumnStart_Measure_02_0+LineColumnEnd_Measure_02_0)</l>
<l>*     TmpCtrl_Dr := LineRowStart_Measure_02_0-LineRowEnd_Measure_02_0</l>
<l>*     TmpCtrl_Dc := LineColumnEnd_Measure_02_0-LineColumnStart_Measure_02_0</l>
<l>*     TmpCtrl_Phi := atan2(TmpCtrl_Dr, TmpCtrl_Dc)</l>
<l>*     TmpCtrl_Len1 := 0.5*sqrt(TmpCtrl_Dr*TmpCtrl_Dr + TmpCtrl_Dc*TmpCtrl_Dc)</l>
<l>*     TmpCtrl_Len2 := RoiWidthLen2</l>
<c>    * Measure 01: Create measure for line Measure 01 [0]</c>
<c>    * Measure 01: Attention: This assumes all images have the same size!</c>
<l>*     gen_measure_rectangle2 (TmpCtrl_Row, TmpCtrl_Column, TmpCtrl_Phi, TmpCtrl_Len1, TmpCtrl_Len2, 1280, 1280, 'nearest_neighbor', MsrHandle_Measure_01_0)</l>
<c>    * Measure 01: Set fuzzy functions on measure objects</c>
<l>*     FuzzyThreshold := 0.6</l>
<l>*     ReferenceWidth := 30</l>
<l>*     create_funct_1d_pairs ([1120.41,1120.91,1121.91,1122.41], [0,1,1,0], TmpCtrl_FunctionSize)</l>
<l>*     set_fuzzy_measure (MsrHandle_Measure_01_0, 'size', TmpCtrl_FunctionSize)</l>
<c>    </c>
<c>    * Measure 01: Execute measurements</c>
<l>*     fuzzy_measure_pairs (Image, MsrHandle_Measure_01_0, 1.4, AmplitudeThreshold, 0.6, 'all', Row1_Measure_02_0, Column1_Measure_02_0, Amplitude1_Measure_02_0, Row2_Measure_02_0, Column2_Measure_02_0, Amplitude2_Measure_02_0, TmpCtrl_RowCenter, TmpCtrl_ColumnCenter, Score_Measure_02_0, Width_Measure_01_0, Distance_Measure_02_0)</l>
<c>    * Measure 01: Do something with the results  </c>
<c>*公差为3</c>
<c> * Measure 02: Convert coordinates to rectangle2 type</c>
<l>TmpCtrl_Row := 0.5*(LineRowStart_Measure_02_0+LineRowEnd_Measure_02_0)</l>
<l>TmpCtrl_Column := 0.5*(LineColumnStart_Measure_02_0+LineColumnEnd_Measure_02_0)</l>
<l>TmpCtrl_Dr := LineRowStart_Measure_02_0-LineRowEnd_Measure_02_0</l>
<l>TmpCtrl_Dc := LineColumnEnd_Measure_02_0-LineColumnStart_Measure_02_0</l>
<l>TmpCtrl_Phi := atan2(TmpCtrl_Dr, TmpCtrl_Dc)</l>
<l>TmpCtrl_Len1 := 0.5*sqrt(TmpCtrl_Dr*TmpCtrl_Dr + TmpCtrl_Dc*TmpCtrl_Dc)</l>
<l>TmpCtrl_Len2 := RoiWidthLen2</l>
<c>* Measure 02: Create measure for line Measure 02 [0]</c>
<c>* Measure 02: Attention: This assumes all images have the same size!</c>
<l>gen_measure_rectangle2 (TmpCtrl_Row, TmpCtrl_Column, TmpCtrl_Phi, TmpCtrl_Len1, TmpCtrl_Len2, 1280, 1280, 'nearest_neighbor', MsrHandle_Measure_02_0)</l>
<c>* Measure 02: Set fuzzy functions on measure objects</c>
<l>FuzzyThreshold := 0.6</l>
<l>create_funct_1d_pairs ([1119,1120.5,1123.5,1125], [0,1,1,0], TmpCtrl_FunctionSize)</l>
<l>set_fuzzy_measure (MsrHandle_Measure_02_0, 'size', TmpCtrl_FunctionSize)</l>
<c>* Measure 02: ***************************************************************</c>
<c>* Measure 02: * The code which follows is to be executed once / measurement *</c>
<c>* Measure 02: ***************************************************************</c>
<c>* Measure 02: *************</c>
<c>* Measure 02: * ATTENTION *</c>
<c>* Measure 02: *************</c>
<c>* Measure 02: The image from the graphics window is not available. At this point,</c>
<c>* Measure 02: it is necessary to ensure an image is stored in the variable 'Image'</c>
<c>* Measure 02: Execute measurements</c>
<l>fuzzy_measure_pairs (Image, MsrHandle_Measure_02_0, 2.6, AmplitudeThreshold, 0.6, 'all', Row1_Measure_02_0, Column1_Measure_02_0, Amplitude1_Measure_02_0, Row2_Measure_02_0, Column2_Measure_02_0, Amplitude2_Measure_02_0, TmpCtrl_RowCenter, TmpCtrl_ColumnCenter, Score_Measure_02_0, Width_Measure_02_0, Distance_Measure_02_0)</l>
<c>* Measure 02: Do something with the results</c>
<c>  </c>
<l>up_row:=[up_row,Row1_Measure_02_0]</l>
<l>    up_column:=[up_column,Column1_Measure_02_0]</l>
<l>    under_row:=[under_row,Row2_Measure_02_0]</l>
<l>    under_column:=[under_column,Column2_Measure_02_0]</l>
<l>    erect_center_row:=[erect_center_row,TmpCtrl_RowCenter]</l>
<c>    </c>
<l>        tuple_is_number (up_row, IsNumber)</l>
<l>        if (I==1200)</l>
<l>            break</l>
<l>        endif</l>
<l>        I:=I+5</l>
<l>endwhile</l>
<c></c>
<l>tuple_mean (erect_center_row,erect_center_row_Mean)</l>
<l>return ()</l>
<c></c>
<c></c>
<c></c>
</body>
<docu id="find_rectangle_height">
<parameters>
<parameter id="AmplitudeThreshold"/>
<parameter id="Image"/>
<parameter id="LineColumnEnd_Measure_02_0"/>
<parameter id="LineColumnStart_Measure_02_0"/>
<parameter id="LineRowEnd_Measure_02_0"/>
<parameter id="LineRowStart_Measure_02_0"/>
<parameter id="RoiWidthLen2"/>
<parameter id="erect_center_row_Mean"/>
<parameter id="under_column"/>
<parameter id="under_row"/>
<parameter id="up_column"/>
<parameter id="up_row"/>
</parameters>
</docu>
</procedure>
<procedure name="find_concer">
<interface>
<oo>
<par name="RegionLines1" base_type="iconic" dimension="0"/>
<par name="RegionLines2" base_type="iconic" dimension="0"/>
<par name="RegionLines3" base_type="iconic" dimension="0"/>
<par name="RegionLines4" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="right_row" base_type="ctrl" dimension="0"/>
<par name="right_column" base_type="ctrl" dimension="0"/>
<par name="left_row" base_type="ctrl" dimension="0"/>
<par name="left_column" base_type="ctrl" dimension="0"/>
<par name="up_row" base_type="ctrl" dimension="0"/>
<par name="up_column" base_type="ctrl" dimension="0"/>
<par name="under_row" base_type="ctrl" dimension="0"/>
<par name="under_column" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Row" base_type="ctrl" dimension="0"/>
<par name="Column" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>Row:=[]</l>
<l>Column:=[]</l>
<c></c>
<l>intersection_lines (right_row[5], right_column[5], right_row[10], right_column[10], up_row[5], up_column[5], up_row[10], up_column[10], concer_Row, concer_Column, IsOverlapping)</l>
<l>Row := [Row,concer_Row]</l>
<l>Column := [Column,concer_Column]</l>
<c></c>
<l>intersection_lines (right_row[5], right_column[5], right_row[10], right_column[10], under_row[5], under_column[5], under_row[10], under_column[10], concer_Row, concer_Column, IsOverlapping1)</l>
<l>Row := [Row,concer_Row]</l>
<l>Column := [Column,concer_Column]</l>
<c></c>
<l>intersection_lines (left_row[5], left_column[5], left_row[10], left_column[10], up_row[5], up_column[5], up_row[10], up_column[10], concer_Row, concer_Column, IsOverlapping2)</l>
<l>Row := [Row,concer_Row]</l>
<l>Column := [Column,concer_Column]</l>
<c></c>
<l>intersection_lines (left_row[5], left_column[5], left_row[10], left_column[10], under_row[5], under_column[5], under_row[10], under_column[10], concer_Row, concer_Column, IsOverlapping3)</l>
<l>Row := [Row,concer_Row]</l>
<l>Column := [Column,concer_Column]</l>
<l>return ()</l>
</body>
<docu id="find_concer">
<parameters>
<parameter id="Column"/>
<parameter id="RegionLines1"/>
<parameter id="RegionLines2"/>
<parameter id="RegionLines3"/>
<parameter id="RegionLines4"/>
<parameter id="Row"/>
<parameter id="left_column"/>
<parameter id="left_row"/>
<parameter id="right_column"/>
<parameter id="right_row"/>
<parameter id="under_column"/>
<parameter id="under_row"/>
<parameter id="up_column"/>
<parameter id="up_row"/>
</parameters>
</docu>
</procedure>
<procedure name="angle">
<interface>
<ic>
<par name="Column" base_type="ctrl" dimension="0"/>
<par name="Row" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="Phi" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c></c>
</body>
<docu id="angle">
<parameters>
<parameter id="Column"/>
<parameter id="Phi"/>
<parameter id="Row"/>
</parameters>
</docu>
</procedure>
<procedure name="line_test">
<interface>
<oo>
<par name="ObjectsConcat6" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="right_row" base_type="ctrl" dimension="0"/>
<par name="left_row" base_type="ctrl" dimension="0"/>
<par name="up_row" base_type="ctrl" dimension="0"/>
<par name="under_row" base_type="ctrl" dimension="0"/>
<par name="right_column" base_type="ctrl" dimension="0"/>
<par name="left_column" base_type="ctrl" dimension="0"/>
<par name="up_column" base_type="ctrl" dimension="0"/>
<par name="under_column" base_type="ctrl" dimension="0"/>
<par name="Row" base_type="ctrl" dimension="0"/>
<par name="Column" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>     gen_contour_polygon_xld (Contour, right_row, right_column)</l>
<l>     gen_contour_polygon_xld (Contour1, left_row,left_column)</l>
<l>     gen_contour_polygon_xld (Contour2, up_row,up_column)</l>
<l>     gen_contour_polygon_xld (Contour3, under_row,under_column)</l>
<l>*for a := 0 to |right_row|-1 by 1</l>
<l>        *if (a==0)</l>
<l>            *gen_region_line (RegionLines1,Row[0],Column[0],right_row[a],right_column[a])</l>
<l>            *gen_region_line (RegionLines2, Row[2],Column[2],left_row[a],left_column[a])</l>
<c>   </c>
<l>        *elseif (a==|right_row|-1)</l>
<l>            *gen_region_line (RegionLines3, right_row[a],right_column[a],Row[1],Column[1])</l>
<l>            *gen_region_line (RegionLines4, left_row[a],left_column[a],Row[3],Column[3])</l>
<l>        *else</l>
<l>            *gen_region_line (RegionLines,right_row[a],right_column[a],right_row[a+1],right_column[a+1])</l>
<l>            * gen_region_line (RegionLines,left_row[a],left_column[a],left_row[a+1],left_column[a+1])</l>
<l>        *endif</l>
<l>*endfor</l>
<c></c>
<l>    concat_obj (Contour,Contour1,ObjectsConcat)</l>
<l>    concat_obj (ObjectsConcat,Contour3,ObjectsConcat1)</l>
<l>    *concat_obj (ObjectsConcat1,RegionLines1,ObjectsConcat2)</l>
<l>     *concat_obj (RegionLines1,RegionLines2,ObjectsConcat2)</l>
<l>    *concat_obj (ObjectsConcat2,RegionLines2,ObjectsConcat3)</l>
<l>    *concat_obj (ObjectsConcat3,RegionLines3,ObjectsConcat4)</l>
<l>    *concat_obj (ObjectsConcat4,RegionLines4, ObjectsConcat5)</l>
<l>    *concat_obj (ObjectsConcat5, Contour2, ObjectsConcat6)</l>
<l>    concat_obj (ObjectsConcat1,Contour2,ObjectsConcat6)</l>
<l>return ()</l>
</body>
<docu id="line_test">
<parameters>
<parameter id="Column"/>
<parameter id="ObjectsConcat6"/>
<parameter id="Row"/>
<parameter id="left_column"/>
<parameter id="left_row"/>
<parameter id="right_column"/>
<parameter id="right_row"/>
<parameter id="under_column"/>
<parameter id="under_row"/>
<parameter id="up_column"/>
<parameter id="up_row"/>
</parameters>
</docu>
</procedure>
<procedure name="line_test01">
<interface>
<io>
<par name="ObjectsConcat6" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="ObjectsConcat10" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="up_row" base_type="ctrl" dimension="0"/>
<par name="Row" base_type="ctrl" dimension="0"/>
<par name="Column" base_type="ctrl" dimension="0"/>
<par name="up_column" base_type="ctrl" dimension="0"/>
<par name="under_row" base_type="ctrl" dimension="0"/>
<par name="under_column" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>for b := 0 to |up_row|-1 by 1</l>
<l>        if (b==0)</l>
<l>            gen_region_line (RegionLines5, Row[0],Column[0],up_row[b],up_column[b])</l>
<l>            gen_region_line (RegionLines6, Row[1],Column[1],under_row[0],under_column[0])</l>
<l>        elseif (b==|up_row|-1)</l>
<l>            gen_region_line (RegionLines7,up_row[b],up_column[b],Row[2],Column[2])</l>
<l>            gen_region_line (RegionLines8, under_row[b],under_column[b],Row[3],Column[3])</l>
<l>        *else</l>
<l>            *gen_region_line (RegionLines,up_row[b],up_column[b],up_row[b+1],up_column[b+1])</l>
<l>           * gen_region_line (RegionLines,under_row[b],under_column[b],under_row[b+1],under_column[b+1])</l>
<l>        endif</l>
<l>endfor</l>
<l>concat_obj (ObjectsConcat6, RegionLines5, ObjectsConcat6)</l>
<l>    concat_obj (ObjectsConcat6,RegionLines6,ObjectsConcat7)</l>
<l>    concat_obj (ObjectsConcat7,RegionLines7,ObjectsConcat8)</l>
<l>concat_obj (ObjectsConcat8, RegionLines8, ObjectsConcat10)</l>
<l>return ()</l>
</body>
<docu id="line_test01">
<parameters>
<parameter id="Column"/>
<parameter id="ObjectsConcat10"/>
<parameter id="ObjectsConcat6"/>
<parameter id="Row"/>
<parameter id="under_column"/>
<parameter id="under_row"/>
<parameter id="up_column"/>
<parameter id="up_row"/>
</parameters>
</docu>
</procedure>
</hdevelop>
